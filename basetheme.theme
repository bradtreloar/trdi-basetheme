<?php
/**
 * @file
 * Theme file for basetheme base theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_form_alter().
 */
function basetheme_form_alter(&$form, $form_state, $form_id) {

  // Remove preview button from contact form.
  if ($form_id == 'contact_message_feedback_form') {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

/**
 * Implements template_preprocess_block()
 */
function basetheme_preprocess_block(&$variables) {
  $block = Block::load($variables['elements']['#id']);

  if ($variables['base_plugin_id'] == 'block_content') {
    // Get the machine name of the custom block type.
    $connection = \Drupal::service('database');
    $custom_block_type = $connection->query("SELECT type FROM block_content WHERE uuid = :uuid", [
      ':uuid' => $variables['derivative_plugin_id'],
    ])->fetchField();

    // Call the block-type-specific preprocessor.
    $block_type_preprocessor = __FUNCTION__ . '_' . $custom_block_type;
    if (function_exists($block_type_preprocessor)) {
      $block_type_preprocessor($variables);
    }
  }

  // If this is a views block and it has a more link
  // then add the link to the block as a button.
  if (isset($variables['content']['#type']) && $variables['content']['#type'] == 'view') {
    basetheme_preprocess_block_views($variables);
  }

  if ($variables['plugin_id'] == 'system_main_block') {
    // If this is a 404 block then wrap the system block content.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'system.404') {
      $variables['content']['#prefix'] = '</article><div class="container">';
      $variables['content']['#suffix'] = '</div></article>';
    }
  }
}

/**
 * Preprocessor for page banner blocks.
 */
function basetheme_preprocess_block_page_banner(&$variables) {
  $uuid = $variables['derivative_plugin_id'];
  $block_content = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
  if ($block_content) {
    if ($file = $block_content->field_image->entity) {
      $uri = $file->getFileUri();
      $htmlId = $variables['attributes']['id'];

      // Add style element to vars.
      $variables['backdrop_css'] = _basetheme_responsive_background_css('banner', "#$htmlId .backdrop", $uri);
    }
  }
}

/**
 * Preprocessor for views blocks.
 */
function basetheme_preprocess_block_views(&$variables) {
  $view = $variables['content']['#view'];

  // @todo Handle setting "use_more_always: false"
  $display = $view->getDisplay('default');

  if ($display->isMoreEnabled() && $display->usesLinkDisplay()) {
    $link_display_option = $display->getOption('link_display');

    // @todo Handle link provided by other view displays (e.g. page)
    if ($link_display_option == 'custom_url') {
      $title = $display->getOption('use_more_text');
      $url = $display->getOption('link_url');
    }

    // Prepare the link element.
    $variables['more_link'] = [
      '#type' => 'link',
      '#title' => $title,
      '#url' => Url::fromUserInput('/' . $url),
      '#attributes' => [
        'class' => 'btn btn-outline-primary',
      ],
    ];
  }
}

/**
 * Implements template_preprocess_html()
 */
function basetheme_preprocess_html(&$variables) {
  global $base_url;
  $theme_path = \Drupal::service('theme.manager')->getActiveTheme()->getPath();
  $variables['favicon_dir'] = "$base_url/$theme_path/images/favicon";
  $variables['theme_color'] = '#15326c';
}

/**
 * Implements template_preprocess_page()
 */
function basetheme_preprocess_page(&$variables) {
  global $base_url;
  $theme_path = \Drupal::service('theme.manager')->getActiveTheme()->getPath();
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $variables['site_logo'] = "$base_url/$theme_path/logo.svg";
  $variables['current_year'] = date('Y');
}

/**
 * Implements template_preprocess_field()
 */
function basetheme_preprocess_field(&$variables) {
  // Call the type-specific preprocessor.
  $field_type_preprocessor = __FUNCTION__ . '_type_' . $variables['field_type'];
  if (function_exists($field_type_preprocessor)) {
    $field_type_preprocessor($variables);
  }

  // Call the name-specific preprocessor.
  $field_name_preprocessor = __FUNCTION__ . '_' . str_replace("field_", "", $variables['field_name']);
  if (function_exists($field_name_preprocessor)) {
    $field_name_preprocessor($variables);
  }
}

/**
 * Implements template_preprocess_node()
 */
function basetheme_preprocess_menu(&$variables, $hook) {
  if ($variables['menu_name'] == 'social-media') {
    foreach ($variables['items'] as &$item) {
      try {
        $uri = $item['url']->getUri();

        $icons = [
          '/facebook\.com/' => 'facebook-square',
          '/instagram\.com/' => 'instagram',
        ];

        foreach ($icons as $uri_pattern => $icon_name) {
          if (preg_match("$uri_pattern", $uri)) {
            $item['icon'] = $icon_name;
          }
        }
      }
      catch (UnexpectedValueException $ex) {}
    }
  }
}

/**
 * Implements template_preprocess_node()
 */
function basetheme_preprocess_node(&$variables) {
  // Change the submission date format.
  $variables['date'] = \Drupal::service('date.formatter')
    ->format($variables['node']->getCreatedTime(), 'custom', 'j M Y');

  // Call the type-specific preprocessor.
  $node_type_preprocessor = __FUNCTION__ . '_' . $variables['node']->getType();
  if (function_exists($node_type_preprocessor)) {
    $node_type_preprocessor($variables);
  }
}

/**
 * Preprocessor for portfolio item nodes.
 */
function basetheme_preprocess_node_portfolio_item(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'teaser') {
    $image_uri = $node->get('field_image')->entity->getFileUri();

    $image_style = ImageStyle::load('project_thumbnail');
    $variables['image_url'] = file_url_transform_relative($image_style->buildUrl($image_uri));
  }
}

/**
 * Implements template_preprocess_paragraph()
 */
function basetheme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Call the type-specific preprocessor.
  $paragraph_type_preprocessor = __FUNCTION__ . '_' . $paragraph->getType();
  if (function_exists($paragraph_type_preprocessor)) {
    $paragraph_type_preprocessor($variables);
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function basetheme_theme_suggestions_block_alter(&$suggestions, $variables) {

  // Add template suggestions for custom block types.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {

    // Get the block type from the database.
    $uuid = $variables['elements']['#derivative_plugin_id'];
    $block_type = \Drupal::database()
      ->select('block_content', 'bc')
      ->fields('bc', ['type'])
      ->condition('uuid', $uuid)
      ->execute()
      ->fetchField();

    // Add a template suggestion for the block type.
    $suggestions[] = 'block__' . $block_type;
  }
}

/**
 * Adds background CSS to variables.
 *
 * @param string $image_style_basename
 *    The base name of the image style. i.e. <basename>_<breakpoint_name>
 * @param string $selector
 *    The CSS selector to be used for this background image CSS
 * @param string $image_uri
 *    The URI for the source image.
 * @return array
 *    The render array for the style element.
 */
function _basetheme_responsive_background_css(string $image_style_basename, string $selector, string $image_uri) {
  // Fetch this theme's breakpoints.
  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('basetheme');

  // Prepare an array of CSS media queries and URLs to be
  // assembled into background-image rules.
  $cssRules = [];
  foreach ($breakpoints as $breakpoint_id => $breakpoint) {
    // Derive the image style name from the breakpoint name.
    $image_style_name = str_replace('basetheme.', "{$image_style_basename}_", $breakpoint_id);

    // Try to load the image style.
    if ($image_style = ImageStyle::load($image_style_name)) {
      // Save the cssRule components.
      $cssRules[] = [
        'mediaQuery' => $breakpoint->getMediaQuery(),
        'url' => file_url_transform_relative($image_style->buildUrl($image_uri)),
      ];
    }
  }

  // Generate CSS to provide a background-image rule for each
  // of this theme's breakpoints that have a matching image style.
  // Use block's HTML ID as the selector.
  $css = '';
  foreach ($cssRules as $rule) {
    $mediaQuery = $rule['mediaQuery'];
    $url = $rule['url'];
    $css .= "@media $mediaQuery { $selector::before, $selector::after { background-image: url('$url'); }}\n";
  }

  return [
    '#type' => 'html_tag',
    '#tag' => 'style',
    '#value' => $css,
  ];
}
